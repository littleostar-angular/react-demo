{"version":3,"sources":["logo.svg","component_/App.js","component_/Hello.js","component_/SayHello.js","router_/AppRouter.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","logo","alt","href","target","rel","Component","Hello","name","this","props","sayName","React","SayHello","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","showName","component_Hello","Index","About","Users","AppRouter","BrowserRouter","basename","Link","to","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","router_AppRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gRC8BzBC,0LArBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,wBAXQC,cCmBHC,mLARX,IAAMC,EAAOC,KAAKC,MAAMC,QAExB,OACEf,EAAAC,EAAAC,cAAA,mBAAWU,EAAX,YANcI,IAAMN,WCcXO,cAtBb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAI,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAV,QACKW,MAAQ,CACXC,SAAU,SAHAP,wEAUZ,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwB,EAAD,CAAOX,QAASF,KAAKW,MAAMC,WAC3BzB,EAAAC,EAAAC,cAAA,gGAfeQ,aCGjBiB,EAAQ,kBAAM3B,EAAAC,EAAAC,cAAA,mBACd0B,EAAQ,kBAAM5B,EAAAC,EAAAC,cAAA,oBACd2B,EAAQ,kBAAM7B,EAAAC,EAAAC,cAAA,oBAqCL4B,mLAhCX,OACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAQC,SAAS,eACfhC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,GAAG,KAAT,SAEFlC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,GAAG,UAAT,UAEFlC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,GAAG,UAAT,UAEFlC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,GAAG,QAAT,QAEFlC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,GAAG,aAAT,eAKNlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWX,IACjC3B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,KAAK,SAASE,UAAWV,IAChC5B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,KAAK,SAASE,UAAWT,IAChC7B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,KAAK,OAAOE,UAAWvC,IAC9BC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,KAAK,YAAYE,UAAWrB,aA9BrBP,aCEJ6B,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAAcC,SAASC,eAAe,SD2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ffc9aef0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\nimport './App.css';\r\n\r\n// 类写法\r\nclass App extends Component {\r\n\r\n  render() { // render() 绘制\r\n\r\n    return ( // 返回JSX组件\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App; // 导出供其他文件使用","import React from 'react';\r\n\r\n// 第一种写法, function省略写法\r\n// export default ({name}) => <h1>Hello {name}!</h1>;\r\n\r\n// 第二种写法, function写法\r\n/*\r\nexport default function({ name }) {\r\n  return <h1>Hello {name}!</h1>\r\n};\r\n*/\r\n\r\n// 第三种写法, 类写法\r\nclass Hello extends React.Component { // --> SayHello.js 第15行被使用\r\n\r\n  render() { // render() 绘制\r\n    const name = this.props.sayName; // 获取宿主属性\"sayName\"并赋值给\"name\"\r\n\r\n    return ( // 返回JSX组件\r\n      <h1>Hello {name}!</h1> // {name} => 上面声明的name属性\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hello;\r\n","import React, {Component} from \"react\";\r\nimport Hello from \"./Hello\";\r\n\r\nclass SayHello extends Component { // 类写法\r\n\r\n  constructor() { // 构造函数, 只用来初始化值\r\n    super();\r\n    this.state = { // 当前组件的属性集合\r\n      showName: 'React' // 新建 showName = 'React'\r\n    };\r\n  }\r\n\r\n  render() { // render() 绘制方法, 绘制下方return()返回的JSX组件\r\n\r\n    // <Hello props: 声明一个属性, 传递至Hello组件 (这里称Hello为宿主)\r\n    return ( // return 返回的就是一个JSX, 一个组件\r\n      <div>\r\n        <Hello sayName={this.state.showName}/>\r\n        <p>\r\n          开始编辑去见证魔法的诞生 :)\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default SayHello; // 导出供其他文件使用","import React, {Component} from 'react';\r\nimport {BrowserRouter as Router, Link, Route} from 'react-router-dom';\r\n\r\nimport App from '../component_/App';\r\nimport SayHello from '../component_/SayHello';\r\n\r\nconst Index = () => <h2>Home</h2>;\r\nconst About = () => <h2>About</h2>;\r\nconst Users = () => <h2>Users</h2>;\r\n\r\nclass AppRouter extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <Router basename=\"/react-demo\">\r\n        <div>\r\n          <nav>\r\n            <ul>\r\n              <li>\r\n                <Link to=\"/\">Home</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/about\">About</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/users\">Users</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/app\">App</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/sayHello\">SayHello</Link>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n\r\n          <Route path=\"/\" exact component={Index} />\r\n          <Route path=\"/about\" component={About} />\r\n          <Route path=\"/users\" component={Users} />\r\n          <Route path=\"/app\" component={App} />\r\n          <Route path=\"/sayHello\" component={SayHello} />\r\n        </div>\r\n      </Router>);\r\n  }\r\n}\r\nexport default AppRouter; // 导出供其他文件使用","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                    'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                );\r\n\r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n\r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n            response.status === 404 ||\r\n            (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n            'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppRouter from './router_/AppRouter';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<AppRouter/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}